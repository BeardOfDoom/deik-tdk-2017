# Home page
title.home = Home
home.welcome = Welcome!
home.desc.header.general = General
home.desc.p.general = This web application was made for the University of Debrecen Faculty of Informatics. The aim of the project is to help students learning the basics of artificial intelligence course. With a unique modelling language you can describe your own problem, and we convert it to a Java file. You can run predefined search algorithms on it, or you can upload your own. Finally you can view the traversed state-space graph, and get some useful information about it.
home.desc.header.reglog = Registration and login
home.desc.p.reglog = To use the main functionality of the page, you must first register an account. After registration, you will be automatically logged in, but you can do it yourself later, too, in the login page.
home.desc.header.profile = Profile page
home.desc.p.profile = After logging in, the Profile page will be available for you. In this page, you can view the list of your problems and search algorithms. Clicking on the links, you can check the result of the search algorithms. Every search algorithm can be in 3 different states: done, in progress and error.
home.desc.header.problem = New problem
home.desc.p.problem = In the New problem page you can define a new problem, and you can run different search algorithms on it. You have to fill some required fields there. You can define your new problem, or you can choose one of the demo problems. You can find the full specification of the problem defining language in the following <a href="https://github.com/veresdavid/deik-tdk-2017/tree/master/generator">link</a>. We have 9 different predefined search algorithms, but you can also upload your own. After submitting, if no error occurs, the result links will appear.
home.desc.header.searcher = New solution searcher
home.desc.p.searcher = There are some documentations to help you make your own solution searcher:<br/><a href="https://github.com/veresdavid/deik-tdk-2017/blob/master/solution-provider/src/main/java/solutionsearchers/helpers/InformationCollector.java">output</a><br/><a href="https://github.com/veresdavid/deik-tdk-2017/blob/master/solution-provider/src/main/java/solutionsearchers/BackTrackOptimal.java">node</a><br/><a href="https://github.com/veresdavid/deik-tdk-2017/blob/master/solution-provider/src/main/java/solutionsearchers/BackTrackOptimal.java">searcher</a>
home.desc.header.heuristic = Heuristic
home.desc.p.heuristic = <style>td, th {border: 1px solid black;text-align: center;}</style>To parse the heuristic function, the component uses an external API called JEP (Java Expression Parser), you can check it <a href="http://sens.cse.msu.edu/Software/jep-2.23/doc/website/index.html">here</a>.<br/>The supported functions and operators are listed below.<br/><h4>Operators</h4>All common arithmetic operators are supported. Boolean operators are also fully supported. Boolean expressions are evaluated to be either 1 or 0 (true or false respectively). A tick indicates that the operator can be used with the specific type of variable. Refer to the grammar for detailed information about operator precedence.<br/><table><thead><tr><th></th><th></th><th>Double</th><th>Complex</th><th>String</th><th>Vector</th></tr></thead><tbody><tr><td>Power</td><td>^</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Boolean Not</td><td>!</td><td>&#10004;</td><td></td><td></td><td></td></tr><tr><td>Unary Plus, Unary Minus</td><td>+x, -x</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Modulus</td><td>%</td><td>&#10004;</td><td></td><td></td><td></td></tr><tr><td>Division</td><td>/</td><td>&#10004;</td><td>&#10004;</td><td></td><td>&#10004;</td></tr><tr><td>Multiplication</td><td>*</td><td>&#10004;</td><td>&#10004;</td><td></td><td>&#10004;</td></tr><tr><td>Addition, Subtraction</td><td>+, -</td><td>&#10004;</td><td>&#10004;</td><td>&#10004; (only +)</td><td></td></tr><tr><td>Less or Equal, More or Equal</td><td>&lt;=, >=</td><td>&#10004;</td><td></td><td></td><td></td></tr><tr><td>Less Than, Greater Than</td><td>&lt;, ></td><td>&#10004;</td><td></td><td></td><td></td></tr><tr><td>Not Equal, Equal</td><td>!=, ==</td><td>&#10004;</td><td>&#10004;</td><td>&#10004;</td><td></td></tr><tr><td>Boolean And</td><td>&amp;&amp;</td><td>&#10004;</td><td></td><td></td><td></td></tr><tr><td>Boolean Or</td><td>||</td><td>&#10004;</td><td></td><td></td><td></td></tr></tbody></table><br/><h4>Standard functions</h4>Each of the following functions can be applied to objects of the types indicated.<br/><table><thead><tr><th></th><th></th><th>Double</th><th>Complex</th><th>String</th><th>Vector</th></tr></thead><tbody><tr><td>Sine</td><td>sin()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Cosine</td><td>cos()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Tangent</td><td>tan()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Arc Sine</td><td>asin()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Arc Cosine</td><td>acos()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Arc Tangent</td><td>atan()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Hyperbolic Sine</td><td>sinh()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Hyperbolic Cosine</td><td>cosh()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Hyperbolic Tangent</td><td>tanh()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Inverse Hyperbolic Sine</td><td>asinh()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Inverse Hyperbolic Cosine</td><td>acosh()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Inverse Hyperbolic Tangent</td><td>atanh()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Natural Logarithm</td><td>ln()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Logarithm base 10</td><td>log()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Angle</td><td>angle()</td><td>&#10004;</td><td></td><td></td><td></td></tr><tr><td>Absolute Value / Magnitude</td><td>abs()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Random number (between 0 and 1)</td><td>rand()</td><td></td><td></td><td></td><td></td></tr><tr><td>Modulus</td><td>mod()</td><td>&#10004;</td><td></td><td></td><td></td></tr><tr><td>Square Root</td><td>sqrt()</td><td>&#10004;</td><td>&#10004;</td><td></td><td></td></tr><tr><td>Sum</td><td>sum()</td><td>&#10004;</td><td></td><td></td><td>&#10004;</td></tr></tbody></table><br/><h4>Extra functions</h4><table><thead><tr><th></th><th></th><th>Double</th><th>Complex</th><th>String</th><th>Vector</th></tr></thead><tbody><tr><td>Average</td><td>avg()</td><td>&#10004;</td><td></td><td></td><td>&#10004;</td></tr><tr><td>Cardinality</td><td>card()</td><td>&#10004;</td><td></td><td></td><td>&#10004;</td></tr><tr><td>Maximum</td><td>max()</td><td>&#10004;</td><td></td><td></td><td>&#10004;</td></tr><tr><td>Minimum</td><td>min()</td><td>&#10004;</td><td></td><td></td><td>&#10004;</td></tr></tbody></table><br/>To create a valid heuristic function use this operator and functions. In the heuristic function you are allowed refer to the variables located in your Node class (for example <code>Node.state.attr0</code> ) in this case, you have to list the variables in the "Variables in heuristic function:" input field separated with commas.<br/><h4>Examples</h4>Three jugs:<code>abs(4-Node.state.attr0[0][0])</code><br/>8 queens:<code>abs(72-sum(Node.state.attr0))</code><br/>Hanoi towers:<code>4-card(Node.state.attr2)</code>
home.desc.header.graph = Graph visualizer
home.desc.p.graph = In the result links you can view the graphs traversed by a search algorithm. We can replay the progress of the search algorithm by using the correct buttons. Under the graph, we can see some useful information about the search, and we can also download all the generated files.
home.desc.header.github = GitHub
home.desc.p.github = All the project files are available in the following repository: <a href="https://github.com/veresdavid/deik-tdk-2017">https://github.com/veresdavid/deik-tdk-2017</a>. Here you can find a detailed description about how to start the application on any computer.
home.desc.header.lang = Language
home.desc.p.lang = The page is currently available in two different languages: hungarian and english. You can change it by clicking on the flag icons in the right section of the header.

# Error page
title.error = Error
error.not.found = Error! Page not found!

# Header
header.title = TDK 2017
header.home = Home
header.problem = New problem
header.registration = Registration
header.login = Login
header.logout = Logout
header.github = Code on GitHub
header.profile = Profile
header.carousel.title.1 = Problem Representation Modelling Component
header.carousel.title.2 = Solution Searcher Component
header.carousel.title.3 = Graph Visualizer Component
header.carousel.description.1 = Describe your problems' state-space representation with an easy-to-use modelling language.
header.carousel.description.2 = Search solutions for your problems with various built-in algorithms.
header.carousel.description.3 = Visualize and interact with graphs traversed by search algorithms.
header.carousel.navigation.next = Next
header.carousel.navigation.previous = Previous

# Login page
title.login = Login
login.heading = Login
login.placeholder.username = Username
login.placeholder.password = Password
login.button = Login
login.error.failed = Invalid username or password!
login.error.default = Error!

# Problem page
title.problem = New problem
problem.success.heading = Success
problem.success.description = You can check the output of the algorithms in the following links:
problem.error.serverside.heading = Server-side error
problem.error.serverside.description = Please try again, or come back later.
problem.information.heading = Loading
problem.form.name = Name
problem.form.demos = Demos
problem.demo.hanoi = Hanoi towers
problem.demo.knight = Knight's tour
problem.demo.nqueen = N-queens
problem.demo.jugs = Three jugs
problem.form.statespace = State-space
problem.form.algorithms = Algorithms
problem.algorithm.backtrack.simple = Backtrack
problem.algorithm.backtrack.circle = Backtrack with cycle detection
problem.algorithm.backtrack.path.length.limit = Backtrack with pathlength limitation
problem.algorithm.backtrack.optimal = Backtrack branch and bound
problem.algorithm.breadth.first = Breadth-first
problem.algorithm.depth.first = Depth-first
problem.algorithm.optimal = Optimal
problem.algorithm.best.first = Best-first
problem.algorithm.a = A
problem.algorithm.custom = Custom search algorithm
problem.form.custom.search.algorithm = Custom search algorithms
problem.form.limit = Limit
problem.form.statespace.tree = Visualize the traversed state-space tree
problem.form.heuristic = Heuristic
problem.form.heuristic.variables = Variables in heuristic function
problem.form.required = * Denotes required field
problem.form.submit = Submit

# Registration page
title.registration = Registration
registration.heading = Registration
registration.placeholder.username = Username
registration.placeholder.password = Password
registration.placeholder.confirmPassword = Confirm password
registration.placeholder.email = E-mail
registration.tooltip.username = Username's length must be between 4 and 20 characters.
registration.tooltip.password = Password's length must be between 6 and 30 characters.
registration.tooltip.confirmPassword = It must match the password.
registration.tooltip.email = E-mail's length can't be more then 40 characters.
registration.button = Registration

# View page
title.view = Graph visualizer
view.in.progress = In progress...
view.button.step = Step
view.button.back = Back
view.button.solution = Solution
view.count.step = Step
view.table.information = Information
view.table.graph.identifier = Graph identifier
view.table.algorithm = Search algorithm
view.table.solution.found = Solution found
view.table.nodes = Number of nodes
view.table.edges = Number of edges
view.table.steps = Number of steps
view.table.statespace = State-space representation
view.table.java = Java files
view.table.solution = Solution output
view.table.json = JSON output
view.error.heading = Error!

# Profile page
title.profile = Profile
profile.table.processes = Processes
profile.table.identifier = Process identifier
profile.table.name = Problem's name
profile.table.algorithm = Search algorithm
profile.table.status = Status